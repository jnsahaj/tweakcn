// THIS SCRIPT WAS GENERATED BY GEMINI 2.5 PRO
// We should not trust this script to do all the things we need.

(() => {
  "use strict";

  if (window.TweakcnEmbed) {
    return;
  }

  const applyTheme = (themeState) => {
    const root = document.documentElement;
    if (!root || !themeState || !themeState.styles) {
      console.error("Tweakcn Embed: Missing root element or theme styles.");
      return;
    }

    const { currentMode: mode, styles: themeStyles, radius } = themeState;

    root.classList.toggle("dark", mode === "dark");

    const lightStyles = themeStyles.light || {};
    for (const [key, value] of Object.entries(lightStyles)) {
      if (typeof value === "string") {
        root.style.setProperty(`--${key}`, value);
      }
    }

    if (mode === "dark" && themeStyles.dark) {
      for (const [key, value] of Object.entries(themeStyles.dark)) {
        if (typeof value === "string") {
          root.style.setProperty(`--${key}`, value);
        }
      }
    }

    if (radius) {
      root.style.setProperty("--radius", `${radius}rem`);
    }
  };

  const checkShadcnSupport = () => {
    const rootStyles = getComputedStyle(document.documentElement);
    const requiredVars = [
      "--background",
      "--foreground",
      "--primary",
      "--card",
      "--radius",
    ];
    const hasSupport = requiredVars.every(
      (v) => rootStyles.getPropertyValue(v).trim() !== ""
    );
    return { supported: hasSupport };
  };

  const sendMessageToParent = (message) => {
    if (window.parent && window.parent !== window) {
      window.parent.postMessage(message, "*");
    }
  };

  const handleMessage = (event) => {
    if (event.source !== window.parent) {
      return;
    }

    const { type, payload } = event.data;

    switch (type) {
      case "TWEAKCN_PING":
        sendMessageToParent({ type: "TWEAKCN_PONG" });
        break;

      case "TWEAKCN_CHECK_SHADCN":
        const supportInfo = checkShadcnSupport();
        sendMessageToParent({
          type: "TWEAKCN_SHADCN_STATUS",
          payload: supportInfo,
        });
        break;

      case "TWEAKCN_THEME_UPDATE":
        if (payload && payload.themeState) {
          applyTheme(payload.themeState);
          sendMessageToParent({ type: "TWEAKCN_THEME_APPLIED" });
        }
        break;
    }
  };

  window.addEventListener("message", handleMessage);

  window.TweakcnEmbed = {
    initialized: true,
    version: "1.0.0",
    destroy: () => {
      window.removeEventListener("message", handleMessage);
      delete window.TweakcnEmbed;
    },
  };

  sendMessageToParent({ type: "TWEAKCN_EMBED_LOADED" });
})(); 