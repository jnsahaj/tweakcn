"use client";
import {
  createAdapterProvider,
  debug,
  error,
  mitt_default,
  renderQueryString
} from "./chunk-KGVQSCOG.js";
import "./chunk-4A3CAV7C.js";
import {
  useNavigate,
  useSearchParams
} from "./chunk-XHUW3JYD.js";
import {
  require_react
} from "./chunk-EGKDWVYF.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/.pnpm/nuqs@2.4.1_react-router@7.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1__react@18.3.1/node_modules/nuqs/dist/chunk-TCMXVJZC.js
var historyUpdateMarker = "__nuqs__";
function getSearchParams(url) {
  if (url instanceof URL) {
    return url.searchParams;
  }
  if (url.startsWith("?")) {
    return new URLSearchParams(url);
  }
  try {
    return new URL(url, location.origin).searchParams;
  } catch {
    return new URLSearchParams(url);
  }
}
function patchHistory(emitter, adapter) {
  var _a, _b, _c;
  if (typeof history === "undefined") {
    return;
  }
  if (((_a = history.nuqs) == null ? void 0 : _a.version) && history.nuqs.version !== "0.0.0-inject-version-here") {
    console.error(
      error(409),
      history.nuqs.version,
      `0.0.0-inject-version-here`,
      adapter
    );
    return;
  }
  if ((_c = (_b = history.nuqs) == null ? void 0 : _b.adapters) == null ? void 0 : _c.includes(adapter)) {
    return;
  }
  let lastSearchSeen = typeof location === "object" ? location.search : "";
  emitter.on("update", (search) => {
    const searchString = search.toString();
    lastSearchSeen = searchString.length ? "?" + searchString : "";
  });
  debug(
    "[nuqs %s] Patching history (%s adapter)",
    "0.0.0-inject-version-here",
    adapter
  );
  function sync(url) {
    try {
      const newSearch = new URL(url, location.origin).search;
      if (newSearch === lastSearchSeen) {
        return;
      }
    } catch {
    }
    try {
      emitter.emit("update", getSearchParams(url));
    } catch (e) {
      console.error(e);
    }
  }
  const originalPushState = history.pushState;
  const originalReplaceState = history.replaceState;
  history.pushState = function nuqs_pushState(state, marker, url) {
    originalPushState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) {
      sync(url);
    }
  };
  history.replaceState = function nuqs_replaceState(state, marker, url) {
    originalReplaceState.call(history, state, "", url);
    if (url && marker !== historyUpdateMarker) {
      sync(url);
    }
  };
  history.nuqs = history.nuqs ?? {
    // This will be replaced by the prepack script
    version: "0.0.0-inject-version-here",
    adapters: []
  };
  history.nuqs.adapters.push(adapter);
}

// node_modules/.pnpm/nuqs@2.4.1_react-router@7.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1__react@18.3.1/node_modules/nuqs/dist/chunk-AAU4ZYLC.js
var import_react = __toESM(require_react(), 1);
function createReactRouterBasedAdapter({
  adapter,
  useNavigate: useNavigate2,
  useSearchParams: useSearchParams2
}) {
  const emitter = mitt_default();
  function useNuqsReactRouterBasedAdapter() {
    const navigate = useNavigate2();
    const searchParams = useOptimisticSearchParams2();
    const updateUrl = (0, import_react.useCallback)(
      (search, options) => {
        var _a;
        (0, import_react.startTransition)(() => {
          emitter.emit("update", search);
        });
        const url = new URL(location.href);
        url.search = renderQueryString(search);
        const updateMethod = options.history === "push" ? history.pushState : history.replaceState;
        updateMethod.call(
          history,
          history.state,
          // Maintain the history state
          historyUpdateMarker,
          url
        );
        if (options.shallow === false) {
          navigate(
            {
              // Somehow passing the full URL object here strips the search params
              // when accessing the request.url in loaders.
              hash: url.hash,
              search: url.search
            },
            {
              replace: true,
              preventScrollReset: true,
              state: (_a = history.state) == null ? void 0 : _a.usr
            }
          );
        }
        if (options.scroll) {
          window.scrollTo(0, 0);
        }
      },
      [navigate]
    );
    return {
      searchParams,
      updateUrl
    };
  }
  function useOptimisticSearchParams2() {
    const [serverSearchParams] = useSearchParams2(
      // Note: this will only be taken into account the first time the hook is called,
      // and cached for subsequent calls, causing problems when mounting components
      // after shallow updates have occurred.
      typeof location === "undefined" ? new URLSearchParams() : new URLSearchParams(location.search)
    );
    const [searchParams, setSearchParams] = (0, import_react.useState)(() => {
      if (typeof location === "undefined") {
        return serverSearchParams;
      }
      return new URLSearchParams(location.search);
    });
    (0, import_react.useEffect)(() => {
      function onPopState() {
        setSearchParams(new URLSearchParams(location.search));
      }
      function onEmitterUpdate(search) {
        setSearchParams(search);
      }
      emitter.on("update", onEmitterUpdate);
      window.addEventListener("popstate", onPopState);
      return () => {
        emitter.off("update", onEmitterUpdate);
        window.removeEventListener("popstate", onPopState);
      };
    }, []);
    return searchParams;
  }
  patchHistory(emitter, adapter);
  return {
    NuqsAdapter: createAdapterProvider(useNuqsReactRouterBasedAdapter),
    useOptimisticSearchParams: useOptimisticSearchParams2
  };
}

// node_modules/.pnpm/nuqs@2.4.1_react-router@7.5.0_react-dom@18.3.1_react@18.3.1__react@18.3.1__react@18.3.1/node_modules/nuqs/dist/adapters/react-router/v7.js
var { NuqsAdapter, useOptimisticSearchParams } = createReactRouterBasedAdapter({
  adapter: "react-router-v7",
  useNavigate,
  useSearchParams
});
export {
  NuqsAdapter,
  useOptimisticSearchParams
};
//# sourceMappingURL=nuqs_adapters_react-router_v7.js.map
