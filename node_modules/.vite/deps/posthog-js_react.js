import {
  aa
} from "./chunk-6QSH3Q4C.js";
import {
  require_react
} from "./chunk-EGKDWVYF.js";
import {
  __toESM
} from "./chunk-WOOG5QLI.js";

// node_modules/.pnpm/posthog-js@1.235.6/node_modules/posthog-js/react/dist/esm/index.js
var import_react = __toESM(require_react());
var PostHogContext = (0, import_react.createContext)({ client: aa });
function isDeepEqual(obj1, obj2, visited) {
  if (visited === void 0) {
    visited = /* @__PURE__ */ new WeakMap();
  }
  if (obj1 === obj2) {
    return true;
  }
  if (typeof obj1 !== "object" || obj1 === null || typeof obj2 !== "object" || obj2 === null) {
    return false;
  }
  if (visited.has(obj1) && visited.get(obj1) === obj2) {
    return true;
  }
  visited.set(obj1, obj2);
  var keys1 = Object.keys(obj1);
  var keys2 = Object.keys(obj2);
  if (keys1.length !== keys2.length) {
    return false;
  }
  for (var _i = 0, keys1_1 = keys1; _i < keys1_1.length; _i++) {
    var key = keys1_1[_i];
    if (!keys2.includes(key)) {
      return false;
    }
    if (!isDeepEqual(obj1[key], obj2[key], visited)) {
      return false;
    }
  }
  return true;
}
function PostHogProvider(_a) {
  var children = _a.children, client = _a.client, apiKey = _a.apiKey, options = _a.options;
  var previousInitializationRef = (0, import_react.useRef)(null);
  var posthog = (0, import_react.useMemo)(function() {
    if (client) {
      if (apiKey) {
        console.warn("[PostHog.js] You have provided both `client` and `apiKey` to `PostHogProvider`. `apiKey` will be ignored in favour of `client`.");
      }
      if (options) {
        console.warn("[PostHog.js] You have provided both `client` and `options` to `PostHogProvider`. `options` will be ignored in favour of `client`.");
      }
      return client;
    }
    if (apiKey) {
      return aa;
    }
    console.warn("[PostHog.js] No `apiKey` or `client` were provided to `PostHogProvider`. Using default global `window.posthog` instance. You must initialize it manually. This is not recommended behavior.");
    return aa;
  }, [client, apiKey, JSON.stringify(options)]);
  (0, import_react.useEffect)(function() {
    if (client) {
      return;
    }
    var previousInitialization = previousInitializationRef.current;
    if (!previousInitialization) {
      if (aa.__loaded) {
        console.warn("[PostHog.js] `posthog` was already loaded elsewhere. This may cause issues.");
      }
      aa.init(apiKey, options);
      previousInitializationRef.current = {
        apiKey,
        options: options !== null && options !== void 0 ? options : {}
      };
    } else {
      if (apiKey !== previousInitialization.apiKey) {
        console.warn("[PostHog.js] You have provided a different `apiKey` to `PostHogProvider` than the one that was already initialized. This is not supported by our provider and we'll keep using the previous key. If you need to toggle between API Keys you need to control the `client` yourself and pass it in as a prop rather than an `apiKey` prop.");
      }
      if (options && !isDeepEqual(options, previousInitialization.options)) {
        aa.set_config(options);
      }
      previousInitializationRef.current = {
        apiKey,
        options: options !== null && options !== void 0 ? options : {}
      };
    }
  }, [client, apiKey, JSON.stringify(options)]);
  return import_react.default.createElement(PostHogContext.Provider, { value: { client: posthog } }, children);
}
var usePostHog = function() {
  var client = (0, import_react.useContext)(PostHogContext).client;
  return client;
};
function useFeatureFlagEnabled(flag) {
  var client = usePostHog();
  var _a = (0, import_react.useState)(function() {
    return client.isFeatureEnabled(flag);
  }), featureEnabled = _a[0], setFeatureEnabled = _a[1];
  (0, import_react.useEffect)(function() {
    return client.onFeatureFlags(function() {
      setFeatureEnabled(client.isFeatureEnabled(flag));
    });
  }, [client, flag]);
  return featureEnabled;
}
function useFeatureFlagPayload(flag) {
  var client = usePostHog();
  var _a = (0, import_react.useState)(function() {
    return client.getFeatureFlagPayload(flag);
  }), featureFlagPayload = _a[0], setFeatureFlagPayload = _a[1];
  (0, import_react.useEffect)(function() {
    return client.onFeatureFlags(function() {
      setFeatureFlagPayload(client.getFeatureFlagPayload(flag));
    });
  }, [client, flag]);
  return featureFlagPayload;
}
function useActiveFeatureFlags() {
  var client = usePostHog();
  var _a = (0, import_react.useState)(function() {
    return client.featureFlags.getFlags();
  }), featureFlags = _a[0], setFeatureFlags = _a[1];
  (0, import_react.useEffect)(function() {
    return client.onFeatureFlags(function(flags) {
      setFeatureFlags(flags);
    });
  }, [client]);
  return featureFlags;
}
function useFeatureFlagVariantKey(flag) {
  var client = usePostHog();
  var _a = (0, import_react.useState)(function() {
    return client.getFeatureFlag(flag);
  }), featureFlagVariantKey = _a[0], setFeatureFlagVariantKey = _a[1];
  (0, import_react.useEffect)(function() {
    return client.onFeatureFlags(function() {
      setFeatureFlagVariantKey(client.getFeatureFlag(flag));
    });
  }, [client, flag]);
  return featureFlagVariantKey;
}
var extendStatics = function(d, b) {
  extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
    d2.__proto__ = b2;
  } || function(d2, b2) {
    for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __rest(s, e) {
  var t = {};
  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
    t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
var isFunction = function(f) {
  return typeof f === "function";
};
var isUndefined = function(x) {
  return x === void 0;
};
var isNull = function(x) {
  return x === null;
};
function PostHogFeature(_a) {
  var flag = _a.flag, match = _a.match, children = _a.children, fallback = _a.fallback, visibilityObserverOptions = _a.visibilityObserverOptions, trackInteraction = _a.trackInteraction, trackView = _a.trackView, props = __rest(_a, ["flag", "match", "children", "fallback", "visibilityObserverOptions", "trackInteraction", "trackView"]);
  var payload = useFeatureFlagPayload(flag);
  var variant = useFeatureFlagVariantKey(flag);
  var shouldTrackInteraction = trackInteraction !== null && trackInteraction !== void 0 ? trackInteraction : true;
  var shouldTrackView = trackView !== null && trackView !== void 0 ? trackView : true;
  if (isUndefined(match) || variant === match) {
    var childNode = isFunction(children) ? children(payload) : children;
    return import_react.default.createElement(VisibilityAndClickTrackers, __assign({ flag, options: visibilityObserverOptions, trackInteraction: shouldTrackInteraction, trackView: shouldTrackView }, props), childNode);
  }
  return import_react.default.createElement(import_react.default.Fragment, null, fallback);
}
function captureFeatureInteraction(_a) {
  var _b;
  var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;
  var properties = {
    feature_flag: flag,
    $set: (_b = {}, _b["$feature_interaction/".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)
  };
  if (typeof flagVariant === "string") {
    properties.feature_flag_variant = flagVariant;
  }
  posthog.capture("$feature_interaction", properties);
}
function captureFeatureView(_a) {
  var _b;
  var flag = _a.flag, posthog = _a.posthog, flagVariant = _a.flagVariant;
  var properties = {
    feature_flag: flag,
    $set: (_b = {}, _b["$feature_view/".concat(flag)] = flagVariant !== null && flagVariant !== void 0 ? flagVariant : true, _b)
  };
  if (typeof flagVariant === "string") {
    properties.feature_flag_variant = flagVariant;
  }
  posthog.capture("$feature_view", properties);
}
function VisibilityAndClickTracker(_a) {
  var flag = _a.flag, children = _a.children, onIntersect = _a.onIntersect, onClick = _a.onClick, trackView = _a.trackView, options = _a.options, props = __rest(_a, ["flag", "children", "onIntersect", "onClick", "trackView", "options"]);
  var ref = (0, import_react.useRef)(null);
  var posthog = usePostHog();
  (0, import_react.useEffect)(function() {
    if (isNull(ref.current) || !trackView)
      return;
    var observer = new IntersectionObserver(function(_a2) {
      var entry = _a2[0];
      return onIntersect(entry);
    }, __assign({ threshold: 0.1 }, options));
    observer.observe(ref.current);
    return function() {
      return observer.disconnect();
    };
  }, [flag, options, posthog, ref, trackView, onIntersect]);
  return import_react.default.createElement("div", __assign({ ref }, props, { onClick }), children);
}
function VisibilityAndClickTrackers(_a) {
  var flag = _a.flag, children = _a.children, trackInteraction = _a.trackInteraction, trackView = _a.trackView, options = _a.options, props = __rest(_a, ["flag", "children", "trackInteraction", "trackView", "options"]);
  var clickTrackedRef = (0, import_react.useRef)(false);
  var visibilityTrackedRef = (0, import_react.useRef)(false);
  var posthog = usePostHog();
  var variant = useFeatureFlagVariantKey(flag);
  var cachedOnClick = (0, import_react.useCallback)(function() {
    if (!clickTrackedRef.current && trackInteraction) {
      captureFeatureInteraction({ flag, posthog, flagVariant: variant });
      clickTrackedRef.current = true;
    }
  }, [flag, posthog, trackInteraction, variant]);
  var onIntersect = function(entry) {
    if (!visibilityTrackedRef.current && entry.isIntersecting) {
      captureFeatureView({ flag, posthog, flagVariant: variant });
      visibilityTrackedRef.current = true;
    }
  };
  var trackedChildren = import_react.Children.map(children, function(child) {
    return import_react.default.createElement(VisibilityAndClickTracker, __assign({ flag, onClick: cachedOnClick, onIntersect, trackView, options }, props), child);
  });
  return import_react.default.createElement(import_react.default.Fragment, null, trackedChildren);
}
var INITIAL_STATE = {
  componentStack: null,
  error: null
};
var __POSTHOG_ERROR_MESSAGES = {
  INVALID_FALLBACK: "[PostHog.js][PostHogErrorBoundary] Invalid fallback prop, provide a valid React element or a function that returns a valid React element."
};
var PostHogErrorBoundary = function(_super) {
  __extends(PostHogErrorBoundary2, _super);
  function PostHogErrorBoundary2(props) {
    var _this = _super.call(this, props) || this;
    _this.state = INITIAL_STATE;
    return _this;
  }
  PostHogErrorBoundary2.prototype.componentDidCatch = function(error, errorInfo) {
    var componentStack = errorInfo.componentStack;
    var additionalProperties = this.props.additionalProperties;
    this.setState({
      error,
      componentStack
    });
    var currentProperties;
    if (isFunction(additionalProperties)) {
      currentProperties = additionalProperties(error);
    } else if (typeof additionalProperties === "object") {
      currentProperties = additionalProperties;
    }
    var client = this.context.client;
    client.captureException(error, currentProperties);
  };
  PostHogErrorBoundary2.prototype.render = function() {
    var _a = this.props, children = _a.children, fallback = _a.fallback;
    var state = this.state;
    if (state.componentStack == null) {
      return isFunction(children) ? children() : children;
    }
    var element = isFunction(fallback) ? import_react.default.createElement(fallback, {
      error: state.error,
      componentStack: state.componentStack
    }) : fallback;
    if (import_react.default.isValidElement(element)) {
      return element;
    }
    console.warn(__POSTHOG_ERROR_MESSAGES.INVALID_FALLBACK);
    return import_react.default.createElement(import_react.default.Fragment, null);
  };
  PostHogErrorBoundary2.contextType = PostHogContext;
  return PostHogErrorBoundary2;
}(import_react.default.Component);
export {
  PostHogContext,
  PostHogErrorBoundary,
  PostHogFeature,
  PostHogProvider,
  useActiveFeatureFlags,
  useFeatureFlagEnabled,
  useFeatureFlagPayload,
  useFeatureFlagVariantKey,
  usePostHog
};
//# sourceMappingURL=posthog-js_react.js.map
