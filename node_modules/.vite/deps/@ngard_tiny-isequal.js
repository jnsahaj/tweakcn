import {
  __commonJS
} from "./chunk-WOOG5QLI.js";

// node_modules/.pnpm/@ngard+tiny-isequal@1.1.0/node_modules/@ngard/tiny-isequal/index.js
var require_tiny_isequal = __commonJS({
  "node_modules/.pnpm/@ngard+tiny-isequal@1.1.0/node_modules/@ngard/tiny-isequal/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true }), exports.isEqual = /* @__PURE__ */ function() {
      var e = Object.prototype.toString, r = Object.getPrototypeOf, t = Object.getOwnPropertySymbols ? function(e2) {
        return Object.keys(e2).concat(Object.getOwnPropertySymbols(e2));
      } : Object.keys;
      return function(n, a) {
        return function n2(a2, c, u) {
          var i, s, l, o = e.call(a2), f = e.call(c);
          if (a2 === c) return true;
          if (null == a2 || null == c) return false;
          if (u.indexOf(a2) > -1 && u.indexOf(c) > -1) return true;
          if (u.push(a2, c), o != f) return false;
          if (i = t(a2), s = t(c), i.length != s.length || i.some(function(e2) {
            return !n2(a2[e2], c[e2], u);
          })) return false;
          switch (o.slice(8, -1)) {
            case "Symbol":
              return a2.valueOf() == c.valueOf();
            case "Date":
            case "Number":
              return +a2 == +c || +a2 != +a2 && +c != +c;
            case "RegExp":
            case "Function":
            case "String":
            case "Boolean":
              return "" + a2 == "" + c;
            case "Set":
            case "Map":
              i = a2.entries(), s = c.entries();
              do {
                if (!n2((l = i.next()).value, s.next().value, u)) return false;
              } while (!l.done);
              return true;
            case "ArrayBuffer":
              a2 = new Uint8Array(a2), c = new Uint8Array(c);
            case "DataView":
              a2 = new Uint8Array(a2.buffer), c = new Uint8Array(c.buffer);
            case "Float32Array":
            case "Float64Array":
            case "Int8Array":
            case "Int16Array":
            case "Int32Array":
            case "Uint8Array":
            case "Uint16Array":
            case "Uint32Array":
            case "Uint8ClampedArray":
            case "Arguments":
            case "Array":
              if (a2.length != c.length) return false;
              for (l = 0; l < a2.length; l++) if ((l in a2 || l in c) && (l in a2 != l in c || !n2(a2[l], c[l], u))) return false;
              return true;
            case "Object":
              return n2(r(a2), r(c), u);
            default:
              return false;
          }
        }(n, a, []);
      };
    }();
  }
});
export default require_tiny_isequal();
//# sourceMappingURL=@ngard_tiny-isequal.js.map
