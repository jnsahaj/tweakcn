import { Info } from '../utils/event-utils';
import { userAgent, window } from '../utils/globals';
import { createLogger } from '../utils/logger';
import { isMatchingRegex } from '../utils/regex-utils';
export var SURVEY_LOGGER = createLogger('[Surveys]');
var surveyValidationMap = {
    icontains: function (targets, value) { return targets.some(function (target) { return value.toLowerCase().includes(target.toLowerCase()); }); },
    not_icontains: function (targets, value) { return targets.every(function (target) { return !value.toLowerCase().includes(target.toLowerCase()); }); },
    regex: function (targets, value) { return targets.some(function (target) { return isMatchingRegex(value, target); }); },
    not_regex: function (targets, value) { return targets.every(function (target) { return !isMatchingRegex(value, target); }); },
    exact: function (targets, value) { return targets.some(function (target) { return value === target; }); },
    is_not: function (targets, value) { return targets.every(function (target) { return value !== target; }); },
};
function defaultMatchType(matchType) {
    return matchType !== null && matchType !== void 0 ? matchType : 'icontains';
}
// use urlMatchType to validate url condition, fallback to contains for backwards compatibility
export function doesSurveyUrlMatch(survey) {
    var _a, _b, _c;
    if (!((_a = survey.conditions) === null || _a === void 0 ? void 0 : _a.url)) {
        return true;
    }
    // if we dont know the url, assume it is not a match
    var href = (_b = window === null || window === void 0 ? void 0 : window.location) === null || _b === void 0 ? void 0 : _b.href;
    if (!href) {
        return false;
    }
    var targets = [survey.conditions.url];
    return surveyValidationMap[defaultMatchType((_c = survey.conditions) === null || _c === void 0 ? void 0 : _c.urlMatchType)](targets, href);
}
export function doesSurveyDeviceTypesMatch(survey) {
    var _a, _b, _c;
    if (!((_a = survey.conditions) === null || _a === void 0 ? void 0 : _a.deviceTypes) || ((_b = survey.conditions) === null || _b === void 0 ? void 0 : _b.deviceTypes.length) === 0) {
        return true;
    }
    // if we dont know the device type, assume it is not a match
    if (!userAgent) {
        return false;
    }
    var deviceType = Info.deviceType(userAgent);
    return surveyValidationMap[defaultMatchType((_c = survey.conditions) === null || _c === void 0 ? void 0 : _c.deviceTypesMatchType)](survey.conditions.deviceTypes, deviceType);
}
//# sourceMappingURL=survey-utils.js.map