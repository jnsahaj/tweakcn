{"version":3,"file":"survey-utils.js","sourceRoot":"","sources":["../../../src/utils/survey-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { Survey, SurveyMatchType } from '../posthog-surveys-types'\nimport { Info } from '../utils/event-utils'\nimport { userAgent, window } from '../utils/globals'\nimport { createLogger } from '../utils/logger'\nimport { isMatchingRegex } from '../utils/regex-utils'\n\nexport const SURVEY_LOGGER = createLogger('[Surveys]')\n\nconst surveyValidationMap: Record<SurveyMatchType, (targets: string[], value: string) => boolean> = {\n    icontains: (targets, value) => targets.some((target) => value.toLowerCase().includes(target.toLowerCase())),\n    not_icontains: (targets, value) => targets.every((target) => !value.toLowerCase().includes(target.toLowerCase())),\n    regex: (targets, value) => targets.some((target) => isMatchingRegex(value, target)),\n    not_regex: (targets, value) => targets.every((target) => !isMatchingRegex(value, target)),\n    exact: (targets, value) => targets.some((target) => value === target),\n    is_not: (targets, value) => targets.every((target) => value !== target),\n}\n\nfunction defaultMatchType(matchType?: SurveyMatchType): SurveyMatchType {\n    return matchType ?? 'icontains'\n}\n\n// use urlMatchType to validate url condition, fallback to contains for backwards compatibility\nexport function doesSurveyUrlMatch(survey: Pick<Survey, 'conditions'>): boolean {\n    if (!survey.conditions?.url) {\n        return true\n    }\n    // if we dont know the url, assume it is not a match\n    const href = window?.location?.href\n    if (!href) {\n        return false\n    }\n    const targets = [survey.conditions.url]\n    return surveyValidationMap[defaultMatchType(survey.conditions?.urlMatchType)](targets, href)\n}\n\nexport function doesSurveyDeviceTypesMatch(survey: Survey): boolean {\n    if (!survey.conditions?.deviceTypes || survey.conditions?.deviceTypes.length === 0) {\n        return true\n    }\n    // if we dont know the device type, assume it is not a match\n    if (!userAgent) {\n        return false\n    }\n\n    const deviceType = Info.deviceType(userAgent)\n    return surveyValidationMap[defaultMatchType(survey.conditions?.deviceTypesMatchType)](\n        survey.conditions.deviceTypes,\n        deviceType\n    )\n}\n"]}